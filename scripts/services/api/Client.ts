/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import {ApiUrl} from '../config/ApiConfig'
export class AuthorizedApiBase {
  private readonly config: IConfig;

  protected constructor(config: IConfig) {
    this.config = config;
  }

  protected transformOptions = (options: RequestInit): Promise<RequestInit> => {
    options.headers = {
      ...options.headers,
      Authorization: this.config.JwtToken
    };
    return Promise.resolve(options);
  };

  protected getBaseUrl = (defaultUrl: string, baseUrl?: string) => {
    return ApiUrl !== undefined ? ApiUrl : defaultUrl 
  }
}

export class SessionClient extends AuthorizedApiBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: IConfig, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("https://localhost:44307", baseUrl);
    }

    /**
     * @return Success
     */
    getLitterPins(): Promise<LitterPin[]> {
        let url_ = this.baseUrl + "/app/all-pins";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetLitterPins(_response);
        });
    }

    protected processGetLitterPins(response: Response): Promise<LitterPin[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LitterPin.fromJS(item));
            }
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            return throwException("Unauthorized Request", status, _responseText, _headers);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("Server Error", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LitterPin[]>(<any>null);
    }
}

export abstract class DataStoreItem implements IDataStoreItem {
    dataStoreId?: number;

    constructor(data?: IDataStoreItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataStoreId = _data["dataStoreId"];
        }
    }

    static fromJS(data: any): DataStoreItem {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'DataStoreItem' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataStoreId"] = this.dataStoreId;
        return data; 
    }
}

export interface IDataStoreItem {
    dataStoreId?: number;
}

export class LitterPin extends DataStoreItem implements ILitterPin {
    productAndQuantity?: number[] | undefined;
    hasPlacedOrder?: boolean;
    userUid?: string | undefined;
    dateOrdered?: Date | undefined;

    constructor(data?: ILitterPin) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["productAndQuantity"])) {
                this.productAndQuantity = [] as any;
                for (let item of _data["productAndQuantity"])
                    this.productAndQuantity!.push(item);
            }
            this.hasPlacedOrder = _data["hasPlacedOrder"];
            this.userUid = _data["userUid"];
            this.dateOrdered = _data["dateOrdered"] ? new Date(_data["dateOrdered"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LitterPin {
        data = typeof data === 'object' ? data : {};
        let result = new LitterPin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.productAndQuantity)) {
            data["productAndQuantity"] = [];
            for (let item of this.productAndQuantity)
                data["productAndQuantity"].push(item);
        }
        data["hasPlacedOrder"] = this.hasPlacedOrder;
        data["userUid"] = this.userUid;
        data["dateOrdered"] = this.dateOrdered ? this.dateOrdered.toISOString() : <any>undefined;
        super.toJSON(data);
        return data; 
    }
}

export interface ILitterPin extends IDataStoreItem {
    productAndQuantity?: number[] | undefined;
    hasPlacedOrder?: boolean;
    userUid?: string | undefined;
    dateOrdered?: Date | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

/**
 * Configuration class needed in base class.
 * The config is provided to the API client at initialization time.
 * API clients inherit from #AuthorizedApiBase and provide the config.
 */
export class IConfig {
  constructor(token : string){
    this.JwtToken = token
  }
  /**
   * Returns a valid value for the Authorization header.
   * Used to dynamically inject the current auth header.
   */
  JwtToken: string;
}